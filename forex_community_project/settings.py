"""
Django settings for forex_community_project project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
import os.path
import pathlib

if os.path.isfile('forex_community_project/myconfig.py'):
    from .myconfig import *
else:
    SECRET_KEY = os.environ['SECRET_KEY']
    EHP = os.environ['EHP']
    USR = os.environ['USR']
    PSWD = os.environ['PSWD']
    HST = os.environ['HST']
    AAKI = os.environ['AAKI']
    ASAK = os.environ['ASAK']

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

DEBUG = False

ALLOWED_HOSTS = ['forexflowcom.azurewebsites.net']

HOSTNAME = 'forexflowcom.azurewebsites.net'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'community.apps.CommunityConfig',
    'storages',
    'django_countries',
    'djmoney',
    'paypal.standard.ipn',  
]

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = "pedersenfx@gmail.com"
EMAIL_HOST_PASSWORD=EHP

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
# Add whitenoise middleware after the security middleware                             
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'forex_community_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [BASE_DIR, 'community/templates'],
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'forex_community_project.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'forex_flow_db',
        'USER':USR,   
        'PASSWORD':PSWD,
        'HOST':HST,
        'PORT':'5432'
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#Browser compatibility PostCSS https://github.com/Pithikos/django-compressor-postcss
# COMPRESS_CSS_FILTERS = (
#     'compressor_postcss.PostCSSFilter',
# )
# COMPRESS_POSTCSS_PLUGINS = (
#     'autoprefixer',
#     'postcss-font-magician'
# )

# Internationalization # https://docs.djangoproject.com/en/3.0/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

# Application definition
USE_L10N = False

#to avoid transmitting the CSRF cookie over HTTP accidentally
# CSRF_COOKIE_SECURE = True
# to avoid transmitting the session cookie over HTTP accidentally
# SESSION_COOKIE_SECURE = True

USE_TZ = True

if os.path.isfile('forex_community_project/local_settings.py'):
    from .local_settings import *
else: pass

if not DEBUG:
    AWS_ACCESS_KEY_ID = AAKI
    AWS_SECRET_ACCESS_KEY = ASAK
    AWS_STORAGE_BUCKET_NAME = 'forexflowbucket'
    AWS_S3_FILE_OVERWRITE = True
    AWS_DEFAULT_ACL = None
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    # STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_S3_HOST = 's3.us-east-2.amazonaws.com'
    AWS_S3_REGION_NAME = 'us-east-2'

'''
<?xml version="1.0" encoding="UTF-8"?>
<CORSConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/, http://127.0.0.1:8000/">
  <CORSRule>
       	<AllowedOrigin>https://www.forexflowcom.herokuapp.com</AllowedOrigin>
       	<AllowedMethod>GET</AllowedMethod>
       	<AllowedMethod>POST</AllowedMethod>
     	<AllowedMethod>PUT</AllowedMethod>
    	<AllowedHeader>*</AllowedHeader>
  </CORSRule>
</CORSConfiguration>
'''

STATIC_URL = '/static/'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'  
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

LOGIN_URL = '/login/'

# PayPal Payments
PAYPAL_RECEIVER_EMAIL = 'pedersenfx@gmail.com'
PAYPAL_TEST = False

# Braintree Payments
# if DEBUG:
# BRAINTREE_PRODUCTION = True
# BT_ENVIRONMENT = 'sandbox'
# BT_MERCHANT_ID = BMI
# BT_PUBLIC_KEY = BPUK
# BT_PRIVATE_KEY = BPRK
# else:
    # BRAINTREE_PRODUCTION = False

import logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': ('%(asctime)s [%(process)d] [%(levelname)s] ' +
                       'pathname=%(pathname)s lineno=%(lineno)s ' +
                       'funcname=%(funcName)s %(message)s'),
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        }
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'testlogger': {
            'handlers': ['console'],
            'level': 'INFO',
        }
    }
}